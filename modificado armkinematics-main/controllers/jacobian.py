import numpy as np

MAX_STEP = 5

class JacobianController:
    def __init__(self, arm):
        # the controller should save a reference to the arm it's controlling
        self.arm = arm

    def control(self, target):
        if self.arm.get_num_joints() == 2:
            # if arm has 2 joints
            self.control2J2D(target)
        elif self.arm.get_num_joints() == 3:
            # if arm has 3 joints
            self.control3J2D(target)
        elif self.arm.get_num_joints() == 4:
            # if arm has 4 joints
            self.control4J2D(target)
        elif self.arm.get_num_joints() == 5:
            # if arm has 5 joints
            self.control5J2D(target)
        elif self.arm.get_num_joints() == 6:
            # if arm has 6 joints
            self.control6J2D(target)
        
        else:
            raise Exception("JacobianController.control(target): Can't control an arm with this amount joints.")

    def control2J2D(self, target):
        # the control method receives a target
        curr_end  = self.arm.endeffector()
        delta_pos = target - curr_end
        # we limit the size of the delta_pos vector as MAX_STEP
        # to avoid making large steps
        if delta_pos.r > MAX_STEP:
            delta_pos.r = MAX_STEP

        # # calculate the inverse Jacobian matrix
     

        theta1 = self.arm.thetas[0]
        theta2 = self.arm.thetas[1]

        l1 = self.arm.lengths[0]
        l2 = self.arm.lengths[1]

        a_0_0 = -l1*np.sin(theta1) - l2*np.sin(theta1)*np.cos(theta2) - l2*np.sin(theta2)*np.cos(theta1)
        a_0_1 = -l2*np.sin(theta1)*np.cos(theta2) - l2*np.sin(theta2)*np.cos(theta1)
        a_1_0 = l1*np.cos(theta1) - l2*np.sin(theta1)*np.sin(theta2) + l2*np.cos(theta1)*np.cos(theta2)
        a_1_1 = -l2*np.sin(theta1)*np.sin(theta2) + l2*np.cos(theta1)*np.cos(theta2)
                
        J = np.array([[a_0_0, a_0_1], [a_1_0, a_1_1]])

        iJ = np.linalg.inv(J)

                # the dot product between iJ and the desired displacement
                # in the end-effector gives us the change necessary in joint values
        delta_joints = iJ.dot(np.array([delta_pos.x, delta_pos.y]))

                # with delta_joints in hand, we move the arm
        self.arm.move( delta_joints )
        pass

    def control3J2D(self, target):

        # the control method receives a target
        curr_end  = self.arm.endeffector()
        delta_pos = target - curr_end
        # we limit the size of the delta_pos vector as MAX_STEP
        # to avoid making large steps
        if delta_pos.r > MAX_STEP:
            delta_pos.r = MAX_STEP

        # # calculate the inverse Jacobian matrix
   

        theta1 = self.arm.thetas[0]
        theta2 = self.arm.thetas[1]
        theta3 = self.arm.thetas[2]

        l1 = self.arm.lengths[0]
        l2 = self.arm.lengths[1]
        l3 = self.arm.lengths[2]

        a_0_0 = -l1*np.sin(theta1) - l2*np.sin(theta1)*np.cos(theta2) - l2*np.sin(theta2)*np.cos(theta1) + l3*(np.sin(theta1)*np.sin(theta2) - np.cos(theta1)*np.cos(theta2))*np.sin(theta3) + l3*(-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.cos(theta3)
        a_0_1 = -l1*np.sin(theta1) - l2*np.sin(theta1)*np.cos(theta2) - l2*np.sin(theta2)*np.cos(theta1) + l3*(np.sin(theta1)*np.sin(theta2) - np.cos(theta1)*np.cos(theta2))*np.sin(theta3) + l3*(-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.cos(theta3)
        a_0_2 = -l2*np.sin(theta1)*np.sin(theta2) + l2*np.cos(theta1)*np.cos(theta2) + l3*(-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.cos(theta3) + l3*(-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.sin(theta3)
        a_1_0 = -l2*np.sin(theta1)*np.sin(theta2) + l2*np.cos(theta1)*np.cos(theta2) + l3*(-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.cos(theta3) + l3*(-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.sin(theta3)
        a_1_1 = -l1*np.sin(theta1) - l2*np.sin(theta1)*np.cos(theta2) - l2*np.sin(theta2)*np.cos(theta1) + l3*(np.sin(theta1)*np.sin(theta2) - np.cos(theta1)*np.cos(theta2))*np.sin(theta3) + l3*(-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.cos(theta3)
        a_1_2 = -l2*np.sin(theta1)*np.sin(theta2) + l2*np.cos(theta1)*np.cos(theta2) + l3*(-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.cos(theta3) + l3*(-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.sin(theta3)

        J = np.array([[a_0_0, a_0_1, a_0_2], [a_1_0, a_1_1, a_1_2]])

        try:
            iJ = np.linalg.inv(J)
        except:
            iJ = np.linalg.pinv(J)


        # the dot product between iJ and the desired displacement
        # in the end-effector gives us the change necessary in joint values
        delta_joints = iJ.dot(np.array([delta_pos.x, delta_pos.y]))

        # with delta_joints in hand, we move the arm
        self.arm.move( delta_joints )
        pass
    
    def control4J2D(self, target):
        # the control method receives a target
        pass
    def control5J2D(self, target):
        # the control method receives a target
        pass
    def control6J2D(self, target):
        # the control method receives a target
        curr_end  = self.arm.endeffector()
        delta_pos = target - curr_end
        # we limit the size of the delta_pos vector as MAX_STEP
        # to avoid making large steps
        if delta_pos.r > MAX_STEP:
            delta_pos.r = MAX_STEP

        # # calculate the inverse Jacobian matrix
     
        theta1 = self.arm.thetas[0]
        theta2 = self.arm.thetas[1]
        theta3 = self.arm.thetas[2]
        theta4 = self.arm.thetas[3]
        theta5 = self.arm.thetas[4]
        theta6 = self.arm.thetas[5]

        l1 = self.arm.lengths[0]
        l2 = self.arm.lengths[1]
        l3 = self.arm.lengths[2]
        l4 = self.arm.lengths[3]
        l5 = self.arm.lengths[4]
        l6 = self.arm.lengths[5]
        
        a00 = (50*((-(np.sin(theta1)*np.sin(theta2) - np.cos(theta1)*np.cos(theta2))*np.sin(theta3) - (-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.cos(theta3))*np.sin(theta4) + ((np.sin(theta1)*np.sin(theta2) - np.cos(theta1)*np.cos(theta2))*np.cos(theta3) + (np.sin(theta1)*np.cos(theta2) + np.sin(theta2)*np.cos(theta1))*np.sin(theta3))*np.cos(theta4))*np.sin(theta5) + 50*(((np.sin(theta1)*np.sin(theta2) - np.cos(theta1)*np.cos(theta2))*np.sin(theta3) + (-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.cos(theta3))*np.cos(theta4) + ((np.sin(theta1)*np.sin(theta2) - np.cos(theta1)*np.cos(theta2))*np.cos(theta3) + (np.sin(theta1)*np.cos(theta2) + np.sin(theta2)*np.cos(theta1))*np.sin(theta3))*np.sin(theta4))*np.cos(theta5))*np.cos(theta6) + (50*((-(np.sin(theta1)*np.sin(theta2) - np.cos(theta1)*np.cos(theta2))*np.sin(theta3) - (-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.cos(theta3))*np.sin(theta4) + ((np.sin(theta1)*np.sin(theta2) - np.cos(theta1)*np.cos(theta2))*np.cos(theta3) + (np.sin(theta1)*np.cos(theta2) + np.sin(theta2)*np.cos(theta1))*np.sin(theta3))*np.cos(theta4))*np.cos(theta5) + 50*(-((np.sin(theta1)*np.sin(theta2) - np.cos(theta1)*np.cos(theta2))*np.sin(theta3) + (-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.cos(theta3))*np.cos(theta4) - ((np.sin(theta1)*np.sin(theta2) - np.cos(theta1)*np.cos(theta2))*np.cos(theta3) + (np.sin(theta1)*np.cos(theta2) + np.sin(theta2)*np.cos(theta1))*np.sin(theta3))*np.sin(theta4))*np.sin(theta5))*np.sin(theta6) + (50*(-(np.sin(theta1)*np.sin(theta2) - np.cos(theta1)*np.cos(theta2))*np.sin(theta3) - (-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.cos(theta3))*np.sin(theta4) + 50*((np.sin(theta1)*np.sin(theta2) - np.cos(theta1)*np.cos(theta2))*np.cos(theta3) + (np.sin(theta1)*np.cos(theta2) + np.sin(theta2)*np.cos(theta1))*np.sin(theta3))*np.cos(theta4))*np.sin(theta5) + (50*((np.sin(theta1)*np.sin(theta2) - np.cos(theta1)*np.cos(theta2))*np.sin(theta3) + (-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.cos(theta3))*np.cos(theta4) + 50*((np.sin(theta1)*np.sin(theta2) - np.cos(theta1)*np.cos(theta2))*np.cos(theta3) + (np.sin(theta1)*np.cos(theta2) + np.sin(theta2)*np.cos(theta1))*np.sin(theta3))*np.sin(theta4))*np.cos(theta5) + (50*(np.sin(theta1)*np.sin(theta2) - np.cos(theta1)*np.cos(theta2))*np.sin(theta3) + 50*(-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.cos(theta3))*np.cos(theta4) + (50*(np.sin(theta1)*np.sin(theta2) - np.cos(theta1)*np.cos(theta2))*np.cos(theta3) + 50*(np.sin(theta1)*np.cos(theta2) + np.sin(theta2)*np.cos(theta1))*np.sin(theta3))*np.sin(theta4) + (50*np.sin(theta1)*np.sin(theta2) - 50*np.cos(theta1)*np.cos(theta2))*np.sin(theta3) + (-50*np.sin(theta1)*np.cos(theta2) - 50*np.sin(theta2)*np.cos(theta1))*np.cos(theta3) - 50*np.sin(theta1)*np.cos(theta2) - 50*np.sin(theta1) - 50*np.sin(theta2)*np.cos(theta1)
        
        a01 = (50*((-(np.sin(theta1)*np.sin(theta2) - np.cos(theta1)*np.cos(theta2))*np.sin(theta3) - (-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.cos(theta3))*np.sin(theta4) + ((np.sin(theta1)*np.sin(theta2) - np.cos(theta1)*np.cos(theta2))*np.cos(theta3) + (np.sin(theta1)*np.cos(theta2) + np.sin(theta2)*np.cos(theta1))*np.sin(theta3))*np.cos(theta4))*np.sin(theta5) + 50*(((np.sin(theta1)*np.sin(theta2) - np.cos(theta1)*np.cos(theta2))*np.sin(theta3) + (-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.cos(theta3))*np.cos(theta4) + ((np.sin(theta1)*np.sin(theta2) - np.cos(theta1)*np.cos(theta2))*np.cos(theta3) + (np.sin(theta1)*np.cos(theta2) + np.sin(theta2)*np.cos(theta1))*np.sin(theta3))*np.sin(theta4))*np.cos(theta5))*np.cos(theta6) + (50*((-(np.sin(theta1)*np.sin(theta2) - np.cos(theta1)*np.cos(theta2))*np.sin(theta3) - (-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.cos(theta3))*np.sin(theta4) + ((np.sin(theta1)*np.sin(theta2) - np.cos(theta1)*np.cos(theta2))*np.cos(theta3) + (np.sin(theta1)*np.cos(theta2) + np.sin(theta2)*np.cos(theta1))*np.sin(theta3))*np.cos(theta4))*np.cos(theta5) + 50*(-((np.sin(theta1)*np.sin(theta2) - np.cos(theta1)*np.cos(theta2))*np.sin(theta3) + (-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.cos(theta3))*np.cos(theta4) - ((np.sin(theta1)*np.sin(theta2) - np.cos(theta1)*np.cos(theta2))*np.cos(theta3) + (np.sin(theta1)*np.cos(theta2) + np.sin(theta2)*np.cos(theta1))*np.sin(theta3))*np.sin(theta4))*np.sin(theta5))*np.sin(theta6) + (50*(-(np.sin(theta1)*np.sin(theta2) - np.cos(theta1)*np.cos(theta2))*np.sin(theta3) - (-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.cos(theta3))*np.sin(theta4) + 50*((np.sin(theta1)*np.sin(theta2) - np.cos(theta1)*np.cos(theta2))*np.cos(theta3) + (np.sin(theta1)*np.cos(theta2) + np.sin(theta2)*np.cos(theta1))*np.sin(theta3))*np.cos(theta4))*np.sin(theta5) + (50*((np.sin(theta1)*np.sin(theta2) - np.cos(theta1)*np.cos(theta2))*np.sin(theta3) + (-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.cos(theta3))*np.cos(theta4) + 50*((np.sin(theta1)*np.sin(theta2) - np.cos(theta1)*np.cos(theta2))*np.cos(theta3) + (np.sin(theta1)*np.cos(theta2) + np.sin(theta2)*np.cos(theta1))*np.sin(theta3))*np.sin(theta4))*np.cos(theta5) + (50*(np.sin(theta1)*np.sin(theta2) - np.cos(theta1)*np.cos(theta2))*np.sin(theta3) + 50*(-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.cos(theta3))*np.cos(theta4) + (50*(np.sin(theta1)*np.sin(theta2) - np.cos(theta1)*np.cos(theta2))*np.cos(theta3) + 50*(np.sin(theta1)*np.cos(theta2) + np.sin(theta2)*np.cos(theta1))*np.sin(theta3))*np.sin(theta4) + (50*np.sin(theta1)*np.sin(theta2) - 50*np.cos(theta1)*np.cos(theta2))*np.sin(theta3) + (-50*np.sin(theta1)*np.cos(theta2) - 50*np.sin(theta2)*np.cos(theta1))*np.cos(theta3) - 50*np.sin(theta1)*np.cos(theta2) - 50*np.sin(theta2)*np.cos(theta1)

        a02 = (50*(-(-(-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.sin(theta3) + (-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.cos(theta3))*np.cos(theta4) - ((np.sin(theta1)*np.sin(theta2) - np.cos(theta1)*np.cos(theta2))*np.cos(theta3) - (-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.sin(theta3))*np.sin(theta4))*np.sin(theta5) + 50*(((-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.sin(theta3) - (-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.cos(theta3))*np.sin(theta4) + ((np.sin(theta1)*np.sin(theta2) - np.cos(theta1)*np.cos(theta2))*np.cos(theta3) - (-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.sin(theta3))*np.cos(theta4))*np.cos(theta5))*np.sin(theta6) + (50*((-(-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.sin(theta3) + (-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.cos(theta3))*np.cos(theta4) + ((np.sin(theta1)*np.sin(theta2) - np.cos(theta1)*np.cos(theta2))*np.cos(theta3) - (-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.sin(theta3))*np.sin(theta4))*np.cos(theta5) + 50*(((-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.sin(theta3) - (-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.cos(theta3))*np.sin(theta4) + ((np.sin(theta1)*np.sin(theta2) - np.cos(theta1)*np.cos(theta2))*np.cos(theta3) - (-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.sin(theta3))*np.cos(theta4))*np.sin(theta5))*np.cos(theta6) + (50*(-(-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.sin(theta3) + (-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.cos(theta3))*np.cos(theta4) + 50*((np.sin(theta1)*np.sin(theta2) - np.cos(theta1)*np.cos(theta2))*np.cos(theta3) - (-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.sin(theta3))*np.sin(theta4))*np.cos(theta5) + (50*((-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.sin(theta3) - (-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.cos(theta3))*np.sin(theta4) + 50*((np.sin(theta1)*np.sin(theta2) - np.cos(theta1)*np.cos(theta2))*np.cos(theta3) - (-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.sin(theta3))*np.cos(theta4))*np.sin(theta5) + (-50*(-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.sin(theta3) + 50*(-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.cos(theta3))*np.cos(theta4) + (50*(np.sin(theta1)*np.sin(theta2) - np.cos(theta1)*np.cos(theta2))*np.cos(theta3) - 50*(-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.sin(theta3))*np.sin(theta4) - (-50*np.sin(theta1)*np.sin(theta2) + 50*np.cos(theta1)*np.cos(theta2))*np.sin(theta3) + (-50*np.sin(theta1)*np.cos(theta2) - 50*np.sin(theta2)*np.cos(theta1))*np.cos(theta3)

        a03 = (50*(-(-(-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.sin(theta3) + (-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.cos(theta3))*np.sin(theta4) + (-(-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.cos(theta3) - (-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.sin(theta3))*np.cos(theta4))*np.sin(theta5) + 50*((-(-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.sin(theta3) + (-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.cos(theta3))*np.cos(theta4) - ((-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.cos(theta3) + (-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.sin(theta3))*np.sin(theta4))*np.cos(theta5))*np.cos(theta6) + (50*(-(-(-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.sin(theta3) + (-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.cos(theta3))*np.sin(theta4) + (-(-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.cos(theta3) - (-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.sin(theta3))*np.cos(theta4))*np.cos(theta5) + 50*(-(-(-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.sin(theta3) + (-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.cos(theta3))*np.cos(theta4) + ((-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.cos(theta3) + (-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.sin(theta3))*np.sin(theta4))*np.sin(theta5))*np.sin(theta6) + (-50*(-(-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.sin(theta3) + (-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.cos(theta3))*np.sin(theta4) + 50*(-(-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.cos(theta3) - (-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.sin(theta3))*np.cos(theta4))*np.sin(theta5) + (50*(-(-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.sin(theta3) + (-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.cos(theta3))*np.cos(theta4) - 50*((-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.cos(theta3) + (-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.sin(theta3))*np.sin(theta4))*np.cos(theta5) + (-50*(-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.sin(theta3) + 50*(-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.cos(theta3))*np.cos(theta4) - (50*(-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.cos(theta3) + 50*(-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.sin(theta3))*np.sin(theta4)
        
        a04 = (50*(-(-(-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.sin(theta3) + (-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.cos(theta3))*np.sin(theta4) - ((-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.cos(theta3) + (-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.sin(theta3))*np.cos(theta4))*np.cos(theta5) - 50*((-(-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.sin(theta3) + (-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.cos(theta3))*np.cos(theta4) - ((-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.cos(theta3) + (-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.sin(theta3))*np.sin(theta4))*np.sin(theta5))*np.sin(theta6) + (-50*((-(-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.sin(theta3) + (-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.cos(theta3))*np.sin(theta4) + ((-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.cos(theta3) + (-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.sin(theta3))*np.cos(theta4))*np.sin(theta5) + 50*((-(-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.sin(theta3) + (-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.cos(theta3))*np.cos(theta4) - ((-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.cos(theta3) + (-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.sin(theta3))*np.sin(theta4))*np.cos(theta5))*np.cos(theta6) - (50*(-(-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.sin(theta3) + (-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.cos(theta3))*np.sin(theta4) + 50*((-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.cos(theta3) + (-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.sin(theta3))*np.cos(theta4))*np.sin(theta5) + (50*(-(-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.sin(theta3) + (-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.cos(theta3))*np.cos(theta4) - 50*((-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.cos(theta3) + (-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.sin(theta3))*np.sin(theta4))*np.cos(theta5)
        
        a05 = (-50*((-(-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.sin(theta3) + (-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.cos(theta3))*np.sin(theta4) + ((-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.cos(theta3) + (-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.sin(theta3))*np.cos(theta4))*np.sin(theta5) + 50*((-(-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.sin(theta3) + (-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.cos(theta3))*np.cos(theta4) - ((-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.cos(theta3) + (-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.sin(theta3))*np.sin(theta4))*np.cos(theta5))*np.cos(theta6) - (50*((-(-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.sin(theta3) + (-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.cos(theta3))*np.sin(theta4) + ((-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.cos(theta3) + (-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.sin(theta3))*np.cos(theta4))*np.cos(theta5) + 50*((-(-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.sin(theta3) + (-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.cos(theta3))*np.cos(theta4) - ((-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.cos(theta3) + (-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.sin(theta3))*np.sin(theta4))*np.sin(theta5))*np.sin(theta6)
        
        a10 = (50*((-(-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.cos(theta3) - (-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.sin(theta3))*np.sin(theta4) + ((np.sin(theta1)*np.sin(theta2) - np.cos(theta1)*np.cos(theta2))*np.sin(theta3) + (-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.cos(theta3))*np.cos(theta4))*np.sin(theta5) + 50*(((-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.cos(theta3) + (-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.sin(theta3))*np.cos(theta4) + ((np.sin(theta1)*np.sin(theta2) - np.cos(theta1)*np.cos(theta2))*np.sin(theta3) + (-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.cos(theta3))*np.sin(theta4))*np.cos(theta5))*np.cos(theta6) + (50*((-(-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.cos(theta3) - (-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.sin(theta3))*np.sin(theta4) + ((np.sin(theta1)*np.sin(theta2) - np.cos(theta1)*np.cos(theta2))*np.sin(theta3) + (-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.cos(theta3))*np.cos(theta4))*np.cos(theta5) + 50*(-((-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.cos(theta3) + (-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.sin(theta3))*np.cos(theta4) - ((np.sin(theta1)*np.sin(theta2) - np.cos(theta1)*np.cos(theta2))*np.sin(theta3) + (-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.cos(theta3))*np.sin(theta4))*np.sin(theta5))*np.sin(theta6) + (50*(-(-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.cos(theta3) - (-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.sin(theta3))*np.sin(theta4) + 50*((np.sin(theta1)*np.sin(theta2) - np.cos(theta1)*np.cos(theta2))*np.sin(theta3) + (-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.cos(theta3))*np.cos(theta4))*np.sin(theta5) + (50*((-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.cos(theta3) + (-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.sin(theta3))*np.cos(theta4) + 50*((np.sin(theta1)*np.sin(theta2) - np.cos(theta1)*np.cos(theta2))*np.sin(theta3) + (-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.cos(theta3))*np.sin(theta4))*np.cos(theta5) + (50*(-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.cos(theta3) + 50*(-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.sin(theta3))*np.cos(theta4) + (50*(np.sin(theta1)*np.sin(theta2) - np.cos(theta1)*np.cos(theta2))*np.sin(theta3) + 50*(-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.cos(theta3))*np.sin(theta4) + (-50*np.sin(theta1)*np.sin(theta2) + 50*np.cos(theta1)*np.cos(theta2))*np.cos(theta3) + (-50*np.sin(theta1)*np.cos(theta2) - 50*np.sin(theta2)*np.cos(theta1))*np.sin(theta3) - 50*np.sin(theta1)*np.sin(theta2) + 50*np.cos(theta1)*np.cos(theta2) + 50*np.cos(theta1)
        
        a11 = (50*((-(-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.cos(theta3) - (-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.sin(theta3))*np.sin(theta4) + ((np.sin(theta1)*np.sin(theta2) - np.cos(theta1)*np.cos(theta2))*np.sin(theta3) + (-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.cos(theta3))*np.cos(theta4))*np.sin(theta5) + 50*(((-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.cos(theta3) + (-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.sin(theta3))*np.cos(theta4) + ((np.sin(theta1)*np.sin(theta2) - np.cos(theta1)*np.cos(theta2))*np.sin(theta3) + (-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.cos(theta3))*np.sin(theta4))*np.cos(theta5))*np.cos(theta6) + (50*((-(-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.cos(theta3) - (-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.sin(theta3))*np.sin(theta4) + ((np.sin(theta1)*np.sin(theta2) - np.cos(theta1)*np.cos(theta2))*np.sin(theta3) + (-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.cos(theta3))*np.cos(theta4))*np.cos(theta5) + 50*(-((-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.cos(theta3) + (-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.sin(theta3))*np.cos(theta4) - ((np.sin(theta1)*np.sin(theta2) - np.cos(theta1)*np.cos(theta2))*np.sin(theta3) + (-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.cos(theta3))*np.sin(theta4))*np.sin(theta5))*np.sin(theta6) + (50*(-(-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.cos(theta3) - (-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.sin(theta3))*np.sin(theta4) + 50*((np.sin(theta1)*np.sin(theta2) - np.cos(theta1)*np.cos(theta2))*np.sin(theta3) + (-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.cos(theta3))*np.cos(theta4))*np.sin(theta5) + (50*((-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.cos(theta3) + (-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.sin(theta3))*np.cos(theta4) + 50*((np.sin(theta1)*np.sin(theta2) - np.cos(theta1)*np.cos(theta2))*np.sin(theta3) + (-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.cos(theta3))*np.sin(theta4))*np.cos(theta5) + (50*(-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.cos(theta3) + 50*(-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.sin(theta3))*np.cos(theta4) + (50*(np.sin(theta1)*np.sin(theta2) - np.cos(theta1)*np.cos(theta2))*np.sin(theta3) + 50*(-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.cos(theta3))*np.sin(theta4) + (-50*np.sin(theta1)*np.sin(theta2) + 50*np.cos(theta1)*np.cos(theta2))*np.cos(theta3) + (-50*np.sin(theta1)*np.cos(theta2) - 50*np.sin(theta2)*np.cos(theta1))*np.sin(theta3) - 50*np.sin(theta1)*np.sin(theta2) + 50*np.cos(theta1)*np.cos(theta2)
        
        a12 = (50*(-(-(-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.sin(theta3) + (-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.cos(theta3))*np.sin(theta4) - ((-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.cos(theta3) - (np.sin(theta1)*np.cos(theta2) + np.sin(theta2)*np.cos(theta1))*np.sin(theta3))*np.cos(theta4))*np.sin(theta5) + 50*((-(-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.sin(theta3) + (-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.cos(theta3))*np.cos(theta4) + (-(-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.cos(theta3) + (np.sin(theta1)*np.cos(theta2) + np.sin(theta2)*np.cos(theta1))*np.sin(theta3))*np.sin(theta4))*np.cos(theta5))*np.sin(theta6) + (50*((-(-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.sin(theta3) + (-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.cos(theta3))*np.sin(theta4) + ((-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.cos(theta3) - (np.sin(theta1)*np.cos(theta2) + np.sin(theta2)*np.cos(theta1))*np.sin(theta3))*np.cos(theta4))*np.cos(theta5) + 50*((-(-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.sin(theta3) + (-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.cos(theta3))*np.cos(theta4) + (-(-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.cos(theta3) + (np.sin(theta1)*np.cos(theta2) + np.sin(theta2)*np.cos(theta1))*np.sin(theta3))*np.sin(theta4))*np.sin(theta5))*np.cos(theta6) + (50*(-(-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.sin(theta3) + (-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.cos(theta3))*np.sin(theta4) + 50*((-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.cos(theta3) - (np.sin(theta1)*np.cos(theta2) + np.sin(theta2)*np.cos(theta1))*np.sin(theta3))*np.cos(theta4))*np.cos(theta5) + (50*(-(-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.sin(theta3) + (-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.cos(theta3))*np.cos(theta4) + 50*(-(-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.cos(theta3) + (np.sin(theta1)*np.cos(theta2) + np.sin(theta2)*np.cos(theta1))*np.sin(theta3))*np.sin(theta4))*np.sin(theta5) + (-50*(-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.sin(theta3) + 50*(-np.sin(theta1)*np.cos(theta2) - np.sin(theta2)*np.cos(theta1))*np.cos(theta3))*np.sin(theta4) + (50*(-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.cos(theta3) - 50*(np.sin(theta1)*np.cos(theta2) + np.sin(theta2)*np.cos(theta1))*np.sin(theta3))*np.cos(theta4) + (-50*np.sin(theta1)*np.sin(theta2) + 50*np.cos(theta1)*np.cos(theta2))*np.cos(theta3) - (50*np.sin(theta1)*np.cos(theta2) + 50*np.sin(theta2)*np.cos(theta1))*np.sin(theta3)
        
        a13 = (50*((-(-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.sin(theta3) - (np.sin(theta1)*np.cos(theta2) + np.sin(theta2)*np.cos(theta1))*np.cos(theta3))*np.cos(theta4) - ((-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.cos(theta3) - (np.sin(theta1)*np.cos(theta2) + np.sin(theta2)*np.cos(theta1))*np.sin(theta3))*np.sin(theta4))*np.sin(theta5) + 50*(-((-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.sin(theta3) + (np.sin(theta1)*np.cos(theta2) + np.sin(theta2)*np.cos(theta1))*np.cos(theta3))*np.sin(theta4) + ((-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.cos(theta3) - (np.sin(theta1)*np.cos(theta2) + np.sin(theta2)*np.cos(theta1))*np.sin(theta3))*np.cos(theta4))*np.cos(theta5))*np.cos(theta6) + (50*((-(-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.sin(theta3) - (np.sin(theta1)*np.cos(theta2) + np.sin(theta2)*np.cos(theta1))*np.cos(theta3))*np.cos(theta4) - ((-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.cos(theta3) - (np.sin(theta1)*np.cos(theta2) + np.sin(theta2)*np.cos(theta1))*np.sin(theta3))*np.sin(theta4))*np.cos(theta5) + 50*(((-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.sin(theta3) + (np.sin(theta1)*np.cos(theta2) + np.sin(theta2)*np.cos(theta1))*np.cos(theta3))*np.sin(theta4) - ((-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.cos(theta3) - (np.sin(theta1)*np.cos(theta2) + np.sin(theta2)*np.cos(theta1))*np.sin(theta3))*np.cos(theta4))*np.sin(theta5))*np.sin(theta6) + (50*(-(-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.sin(theta3) - (np.sin(theta1)*np.cos(theta2) + np.sin(theta2)*np.cos(theta1))*np.cos(theta3))*np.cos(theta4) - 50*((-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.cos(theta3) - (np.sin(theta1)*np.cos(theta2) + np.sin(theta2)*np.cos(theta1))*np.sin(theta3))*np.sin(theta4))*np.sin(theta5) + (-50*((-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.sin(theta3) + (np.sin(theta1)*np.cos(theta2) + np.sin(theta2)*np.cos(theta1))*np.cos(theta3))*np.sin(theta4) + 50*((-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.cos(theta3) - (np.sin(theta1)*np.cos(theta2) + np.sin(theta2)*np.cos(theta1))*np.sin(theta3))*np.cos(theta4))*np.cos(theta5) - (50*(-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.sin(theta3) + 50*(np.sin(theta1)*np.cos(theta2) + np.sin(theta2)*np.cos(theta1))*np.cos(theta3))*np.sin(theta4) + (50*(-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.cos(theta3) - 50*(np.sin(theta1)*np.cos(theta2) + np.sin(theta2)*np.cos(theta1))*np.sin(theta3))*np.cos(theta4)
        
        a14 = (-50*(-((-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.sin(theta3) + (np.sin(theta1)*np.cos(theta2) + np.sin(theta2)*np.cos(theta1))*np.cos(theta3))*np.sin(theta4) + ((-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.cos(theta3) - (np.sin(theta1)*np.cos(theta2) + np.sin(theta2)*np.cos(theta1))*np.sin(theta3))*np.cos(theta4))*np.sin(theta5) + 50*(-((-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.sin(theta3) + (np.sin(theta1)*np.cos(theta2) + np.sin(theta2)*np.cos(theta1))*np.cos(theta3))*np.cos(theta4) - ((-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.cos(theta3) - (np.sin(theta1)*np.cos(theta2) + np.sin(theta2)*np.cos(theta1))*np.sin(theta3))*np.sin(theta4))*np.cos(theta5))*np.sin(theta6) + (50*(-((-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.sin(theta3) + (np.sin(theta1)*np.cos(theta2) + np.sin(theta2)*np.cos(theta1))*np.cos(theta3))*np.sin(theta4) + ((-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.cos(theta3) - (np.sin(theta1)*np.cos(theta2) + np.sin(theta2)*np.cos(theta1))*np.sin(theta3))*np.cos(theta4))*np.cos(theta5) - 50*(((-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.sin(theta3) + (np.sin(theta1)*np.cos(theta2) + np.sin(theta2)*np.cos(theta1))*np.cos(theta3))*np.cos(theta4) + ((-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.cos(theta3) - (np.sin(theta1)*np.cos(theta2) + np.sin(theta2)*np.cos(theta1))*np.sin(theta3))*np.sin(theta4))*np.sin(theta5))*np.cos(theta6) + (-50*((-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.sin(theta3) + (np.sin(theta1)*np.cos(theta2) + np.sin(theta2)*np.cos(theta1))*np.cos(theta3))*np.sin(theta4) + 50*((-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.cos(theta3) - (np.sin(theta1)*np.cos(theta2) + np.sin(theta2)*np.cos(theta1))*np.sin(theta3))*np.cos(theta4))*np.cos(theta5) - (50*((-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.sin(theta3) + (np.sin(theta1)*np.cos(theta2) + np.sin(theta2)*np.cos(theta1))*np.cos(theta3))*np.cos(theta4) + 50*((-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.cos(theta3) - (np.sin(theta1)*np.cos(theta2) + np.sin(theta2)*np.cos(theta1))*np.sin(theta3))*np.sin(theta4))*np.sin(theta5)
        
        a15 = -(50*(-((-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.sin(theta3) + (np.sin(theta1)*np.cos(theta2) + np.sin(theta2)*np.cos(theta1))*np.cos(theta3))*np.sin(theta4) + ((-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.cos(theta3) - (np.sin(theta1)*np.cos(theta2) + np.sin(theta2)*np.cos(theta1))*np.sin(theta3))*np.cos(theta4))*np.sin(theta5) + 50*(((-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.sin(theta3) + (np.sin(theta1)*np.cos(theta2) + np.sin(theta2)*np.cos(theta1))*np.cos(theta3))*np.cos(theta4) + ((-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.cos(theta3) - (np.sin(theta1)*np.cos(theta2) + np.sin(theta2)*np.cos(theta1))*np.sin(theta3))*np.sin(theta4))*np.cos(theta5))*np.sin(theta6) + (50*(-((-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.sin(theta3) + (np.sin(theta1)*np.cos(theta2) + np.sin(theta2)*np.cos(theta1))*np.cos(theta3))*np.sin(theta4) + ((-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.cos(theta3) - (np.sin(theta1)*np.cos(theta2) + np.sin(theta2)*np.cos(theta1))*np.sin(theta3))*np.cos(theta4))*np.cos(theta5) - 50*(((-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.sin(theta3) + (np.sin(theta1)*np.cos(theta2) + np.sin(theta2)*np.cos(theta1))*np.cos(theta3))*np.cos(theta4) + ((-np.sin(theta1)*np.sin(theta2) + np.cos(theta1)*np.cos(theta2))*np.cos(theta3) - (np.sin(theta1)*np.cos(theta2) + np.sin(theta2)*np.cos(theta1))*np.sin(theta3))*np.sin(theta4))*np.sin(theta5))*np.cos(theta6)
 
        
        J = np.array([[a00, a01, a02, a03, a04, a05], [a10, a11, a12, a13, a14, a15]])
        
        iJ = np.linalg.pinv(J)
        
        #J = np.array([[a_0_0, a_0_1, a_0_2], [a_1_0, a_1_1, a_1_2], [a_2_0, a_2_1, a_2_2], [a_3_0, a_3_1, a_3_2], [a_4_0, a_4_1, a_4_2]])

        iJ = np.linalg.pinv(J)

        # the dot product between iJ and the desired displacement
        # in the end-effector gives us the change necessary in joint values
        delta_joints = iJ.dot(np.array([delta_pos.x, delta_pos.y]))

        # with delta_joints in hand, we move the arm
        self.arm.move( delta_joints )
        pass
